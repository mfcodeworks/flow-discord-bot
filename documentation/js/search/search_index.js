var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.449,1,1.449]],["body/controllers/AppController.html",[0,1.907,1,1.907,2,1.975,3,0.448,4,0.448,5,0.448,6,1.975,7,0.448,8,1.204,9,3.906,10,2.487,11,1.605,12,4.41,13,2.487,14,0.061,15,3.418,16,0.876,17,2.487,18,0.876,19,0.876,20,0.639,21,0.876,22,4.41,23,1.186,24,0.751,25,3.906,26,1.639,27,1.639,28,1.387,29,2.487,30,1.409,31,2.487,32,3.418,33,0.751,34,1.639,35,1.639,36,1.387,37,1.387,38,1.907,39,0.879,40,1.186,41,1.376,42,1.639,43,1.975,44,2.487,45,2.487,46,2.487,47,2.487,48,0.539,49,0.216,50,0.751,51,1.401,52,1.639,53,2.487,54,1.639,55,2.487,56,2.487,57,1.376,58,3.418,59,2.487,60,2.487,61,2.487,62,2.574,63,1.601,64,1.907,65,2.487,66,3.418,67,2.487,68,3.418,69,2.487,70,1.639,71,2.487,72,2.487,73,2.253,74,1.975,75,2.487,76,1.639,77,2.487,78,2.574,79,2.487,80,2.487,81,2.487,82,2.487,83,2.487,84,2.487,85,2.487,86,2.487,87,2.487,88,2.487,89,2.487,90,2.487,91,2.487,92,2.487,93,2.487,94,2.487,95,2.487,96,2.487,97,2.487,98,1.387,99,1.639,100,1.387,101,1.186,102,2.487,103,1.387,104,1.387,105,1.907,106,1.186,107,1.019,108,1.639,109,1.975,110,2.487,111,1.639,112,1.387,113,2.487,114,2.487,115,1.639,116,2.487,117,0.028,118,0.039,119,0.028]],["title/modules/AppModule.html",[120,1.239,121,1.449]],["body/modules/AppModule.html",[1,2.452,2,3.18,3,0.569,4,0.569,5,0.569,14,0.06,30,1.495,33,0.954,38,2.233,39,1.253,40,1.507,48,0.685,49,0.275,117,0.036,118,0.045,119,0.036,120,2.097,121,2.842,122,1.507,123,1.507,124,2.081,125,2.081,126,1.507,127,2.897,128,2.081,129,2.509,130,2.509,131,2.509,132,2.325,133,1.471,134,2.638,135,2.081,136,1.507,137,3.158,138,4.003,139,4.003,140,3.158,141,1.762,142,1.507,143,3.158,144,3.158,145,1.762,146,3.158]],["title/classes/Args.html",[49,0.226,147,1.239]],["body/classes/Args.html",[3,0.376,4,0.376,5,0.376,7,0.376,8,1.064,11,1.809,14,0.061,16,1.516,18,1.516,19,1.516,20,1.107,21,1.516,23,1.44,24,1.246,48,0.452,49,0.181,50,0.63,51,1.237,57,1.372,63,1.455,100,1.163,105,2.584,107,1.237,117,0.024,118,0.034,119,0.024,147,2.169,148,1.163,149,1.657,150,3.019,151,4.128,152,3.019,153,3.019,154,3.019,155,3.019,156,3.019,157,3.019,158,2.085,159,2.085,160,3.019,161,4.86,162,2.381,163,2.085,164,2.563,165,1.97,166,3.89,167,3.019,168,3.549,169,2.085,170,2.476,171,3.019,172,2.085,173,1.693,174,3.019,175,2.085,176,2.085,177,2.085,178,2.085,179,2.085,180,1.163,181,2.085,182,2.085,183,2.085,184,2.085,185,2.836,186,3.019,187,1.98,188,3.019,189,2.085,190,2.085,191,2.085,192,3.419,193,2.085,194,2.085,195,3.019,196,4.632,197,3.019,198,2.085,199,2.085,200,2.085,201,2.398,202,2.085]],["title/modules/DiscordModule.html",[120,1.239,132,1.239]],["body/modules/DiscordModule.html",[3,0.603,4,0.603,5,0.603,14,0.06,30,1.425,33,1.01,39,1.272,40,1.596,48,0.726,49,0.291,117,0.038,118,0.047,119,0.038,120,2.153,122,1.596,123,1.596,124,2.204,125,2.204,126,1.596,127,2.974,128,2.204,132,2.453,133,1.493,134,2.735,135,2.204,136,1.596,145,1.866,203,2.657,204,2.657,205,2.027,206,3.345,207,4.15,208,3.345]],["title/injectables/DiscordService.html",[205,1.064,209,0.784]],["body/injectables/DiscordService.html",[3,0.174,4,0.592,5,0.174,7,0.174,8,0.578,11,1.314,14,0.061,16,1.353,18,1.156,19,1.156,20,0.959,21,1.156,23,0.461,24,0.991,26,0.637,27,0.637,28,0.539,30,1.159,33,0.292,34,0.637,35,0.637,36,0.539,37,0.539,38,0.916,39,0.649,40,0.461,41,1.418,42,0.637,48,0.21,49,0.084,50,0.496,51,1.9,52,2.028,54,1.082,57,1.4,63,1.416,70,0.637,73,1.865,76,0.637,98,1.409,100,1.194,101,0.461,103,1.717,104,0.916,106,1.022,107,1.529,108,1.411,111,0.637,112,2.245,115,1.082,117,0.011,118,0.019,119,0.011,133,0.762,136,0.783,145,0.539,147,1.022,162,1.566,164,1.082,165,1.35,170,0.916,173,1.566,180,1.409,185,0.637,187,1.409,205,0.673,209,0.496,210,0.539,211,0.637,212,0.673,213,1.261,214,2.08,215,2.861,216,2.028,217,1.717,218,1.642,219,1.642,220,1.642,221,1.642,222,1.642,223,2.006,224,1.701,225,0.966,226,1.701,227,0.966,228,1.304,229,0.966,230,2.449,231,1.468,232,1.304,233,0.966,234,1.304,235,0.966,236,1.304,237,2.554,238,0.966,239,1.304,240,0.966,241,0.966,242,1.082,243,1.304,244,0.966,245,0.966,246,0.966,247,1.304,248,1.664,249,2.248,250,0.966,251,1.701,252,0.767,253,1.304,254,0.461,255,1.082,256,0.767,257,1.416,258,0.767,259,0.767,260,0.461,261,0.539,262,1.16,263,1.304,264,0.767,265,0.767,266,0.767,267,0.767,268,0.767,269,0.767,270,1.701,271,0.767,272,0.767,273,0.767,274,0.767,275,0.767,276,0.767,277,0.767,278,0.767,279,0.767,280,2.962,281,0.767,282,0.767,283,2.607,284,3.197,285,0.767,286,0.637,287,1.701,288,2.006,289,0.767,290,0.767,291,1.304,292,1.304,293,0.767,294,2.962,295,0.767,296,0.767,297,0.767,298,0.767,299,2.79,300,0.767,301,0.767,302,1.304,303,0.767,304,1.865,305,0.767,306,0.767,307,0.637,308,0.767,309,1.082,310,0.767,311,1.304,312,0.767,313,0.767,314,0.767,315,0.767,316,0.767,317,0.767,318,2.607,319,0.767,320,0.767,321,0.767,322,0.767,323,2.458,324,2.444,325,1.304,326,0.767,327,1.701,328,1.304,329,1.304,330,0.767,331,0.767,332,0.767,333,2.744,334,2.248,335,0.767,336,0.767,337,1.304,338,1.304,339,2.006,340,1.411,341,1.701,342,0.767,343,0.767,344,0.767,345,0.637,346,0.767,347,1.304,348,1.304,349,1.304,350,0.767,351,0.767,352,1.304,353,2.006,354,1.304,355,2.006,356,0.767,357,0.767,358,1.304,359,0.767,360,1.701,361,1.304,362,1.304,363,0.767,364,0.767,365,1.304,366,2.962,367,2.248,368,0.767,369,1.865,370,0.767,371,0.767,372,0.767,373,0.767,374,0.767,375,0.767,376,1.304,377,1.701,378,0.767,379,0.637,380,0.637,381,0.767,382,0.767,383,0.767,384,0.767,385,0.767,386,1.701,387,0.637,388,0.767,389,0.767,390,0.767,391,1.701,392,2.006,393,0.767,394,1.205,395,0.767,396,0.767,397,2.248,398,0.767,399,0.767,400,1.304,401,1.304,402,0.637,403,0.767,404,0.637,405,0.767,406,0.767,407,0.767,408,0.767,409,1.701,410,0.637,411,0.767,412,0.767,413,1.304,414,0.767,415,0.637,416,0.767,417,0.767,418,0.767,419,0.767,420,0.767,421,0.767,422,0.767,423,0.767,424,0.767,425,0.767,426,0.767,427,0.767,428,0.767,429,0.767,430,0.637,431,0.767,432,0.767,433,1.304,434,0.767,435,0.767,436,0.767,437,0.767,438,0.767,439,0.637,440,0.767,441,0.767,442,0.767,443,1.304,444,0.767,445,0.767,446,0.767,447,0.767,448,0.767,449,0.767,450,0.767,451,0.767,452,0.767,453,0.767,454,1.082,455,1.304,456,0.767,457,0.767,458,0.767,459,0.767,460,0.767,461,0.767,462,0.637,463,0.767,464,0.767,465,0.767,466,0.767,467,0.637,468,0.767,469,0.767,470,0.767,471,0.767,472,0.767,473,0.767,474,0.767,475,0.767,476,0.767,477,0.767,478,0.637,479,0.767,480,0.767,481,0.767,482,0.767,483,0.767,484,0.767,485,0.767,486,0.767,487,0.767,488,0.767,489,0.767,490,0.767,491,0.767,492,0.767,493,1.304]],["title/interfaces/Keywords.html",[173,1.239,260,1.239]],["body/interfaces/Keywords.html",[3,0.201,4,0.632,5,0.201,7,0.201,11,1.421,14,0.061,20,0.61,26,0.733,27,0.733,28,0.621,30,1.217,33,0.336,34,0.733,35,0.733,36,0.621,37,0.621,38,1.031,39,0.475,40,0.531,41,1.342,42,0.733,48,0.241,49,0.097,50,0.336,51,1.61,52,1.218,54,0.733,57,1.435,63,1.505,70,0.733,73,2.021,76,0.733,98,1.541,100,1.323,101,0.531,103,1.846,104,1.031,106,1.132,107,1.61,108,1.218,111,0.733,112,2.344,115,1.218,117,0.013,118,0.021,119,0.013,133,0.558,136,0.882,145,0.621,147,1.132,162,1.318,165,0.882,170,0.621,173,1.463,180,1.323,185,0.733,187,1.541,205,0.456,209,0.558,211,0.733,212,0.758,213,0.758,214,1.956,215,1.884,216,1.563,217,1.031,223,0.884,224,0.884,226,0.884,228,0.884,230,2.479,231,1.132,232,0.884,234,0.884,236,0.884,237,2.383,239,0.884,242,0.733,243,0.884,247,0.884,248,2.18,249,2.195,251,1.884,252,0.884,253,1.469,254,0.531,255,1.218,256,0.884,257,1.505,258,0.884,259,0.884,260,0.531,261,0.621,262,1.257,263,1.469,264,0.884,265,0.884,266,0.884,267,0.884,268,0.884,269,0.884,270,1.884,271,0.884,272,0.884,273,0.884,274,0.884,275,0.884,276,0.884,277,0.884,278,0.884,279,0.884,280,3.121,281,0.884,282,0.884,283,2.785,284,3.338,285,0.884,286,0.733,287,1.884,288,2.195,289,0.884,290,0.884,291,1.469,292,1.469,293,0.884,294,3.121,295,0.884,296,0.884,297,0.884,298,0.884,299,2.895,300,0.884,301,0.884,302,1.469,303,0.884,304,2.021,305,0.884,306,0.884,307,0.733,308,0.884,309,1.218,310,0.884,311,1.469,312,0.884,313,0.884,314,0.884,315,0.884,316,0.884,317,0.884,318,2.785,319,0.884,320,0.884,321,0.884,322,0.884,323,2.589,324,2.628,325,1.469,326,0.884,327,1.884,328,1.469,329,1.469,330,0.884,331,0.884,332,0.884,333,2.916,334,2.436,335,0.884,336,0.884,337,1.469,338,1.469,339,2.195,340,1.563,341,1.884,342,0.884,343,0.884,344,0.884,345,0.733,346,0.884,347,1.469,348,1.469,349,1.469,350,0.884,351,0.884,352,1.469,353,2.195,354,1.469,355,2.195,356,0.884,357,0.884,358,1.469,359,0.884,360,1.884,361,1.469,362,1.469,363,0.884,364,0.884,365,1.469,366,3.121,367,2.436,368,0.884,369,2.021,370,0.884,371,0.884,372,0.884,373,0.884,374,0.884,375,0.884,376,1.469,377,1.884,378,0.884,379,0.733,380,0.733,381,0.884,382,0.884,383,0.884,384,0.884,385,0.884,386,1.884,387,0.733,388,0.884,389,0.884,390,0.884,391,1.884,392,2.195,393,0.884,394,1.318,395,0.884,396,0.884,397,2.436,398,0.884,399,0.884,400,1.469,401,1.469,402,0.733,403,0.884,404,0.733,405,0.884,406,0.884,407,0.884,408,0.884,409,1.884,410,0.733,411,0.884,412,0.884,413,1.469,414,0.884,415,0.733,416,0.884,417,0.884,418,0.884,419,0.884,420,0.884,421,0.884,422,0.884,423,0.884,424,0.884,425,0.884,426,0.884,427,0.884,428,0.884,429,0.884,430,0.733,431,0.884,432,0.884,433,1.469,434,0.884,435,0.884,436,0.884,437,0.884,438,0.884,439,0.733,440,0.884,441,0.884,442,0.884,443,1.469,444,0.884,445,0.884,446,0.884,447,0.884,448,0.884,449,0.884,450,0.884,451,0.884,452,0.884,453,0.884,454,1.218,455,1.469,456,0.884,457,0.884,458,0.884,459,0.884,460,0.884,461,0.884,462,0.733,463,0.884,464,0.884,465,0.884,466,0.884,467,0.733,468,0.884,469,0.884,470,0.884,471,0.884,472,0.884,473,0.884,474,0.884,475,0.884,476,0.884,477,0.884,478,0.733,479,0.884,480,0.884,481,0.884,482,0.884,483,0.884,484,0.884,485,0.884,486,0.884,487,0.884,488,0.884,489,0.884,490,0.884,491,0.884,492,0.884,493,1.469,494,1.112]],["title/classes/Profile.html",[41,0.915,49,0.226]],["body/classes/Profile.html",[3,0.532,4,0.532,5,0.532,7,0.532,8,1.351,11,1.741,14,0.059,16,1.741,18,1.04,19,1.04,20,1.253,21,1.04,23,1.408,24,0.891,41,1.351,48,0.64,49,0.257,50,1.158,57,0.891,64,2.375,78,2.806,99,2.806,103,2.375,104,1.647,106,1.408,107,1.745,112,2.375,117,0.033,118,0.043,119,0.033,148,1.647,162,1.829,164,1.945,165,1.408,192,3.046,212,1.571,213,2.14,309,2.806,495,2.345,496,3.58,497,2.952,498,3.382,499,3.834,500,2.952,501,2.952,502,2.952,503,2.952,504,2.952,505,2.952,506,2.952,507,2.345,508,2.952,509,2.952,510,2.345]],["title/injectables/ProfileService.html",[39,0.668,209,0.784]],["body/injectables/ProfileService.html",[3,0.522,4,0.522,5,0.522,7,0.522,8,1.334,11,1.486,14,0.06,16,1.576,18,1.486,19,1.486,20,1.15,21,1.486,24,1.143,30,1.351,33,0.874,39,0.974,41,1.678,48,0.628,49,0.252,50,0.874,51,1.729,57,1.143,64,2.112,101,2.012,117,0.033,118,0.043,119,0.033,141,1.615,142,2.134,209,1.143,210,1.615,212,1.552,213,1.952,214,2.353,217,2.353,230,2.112,231,2.134,261,1.615,262,1.187,511,2.3,512,2.3,513,3.554,514,3.785,515,3.007,516,3.785,517,2.895,518,3.785,519,2.895,520,2.895,521,2.3,522,2.3,523,2.3,524,2.895,525,2.895,526,2.895,527,2.895,528,2.895]],["title/classes/Transaction.html",[49,0.226,257,1.064]],["body/classes/Transaction.html",[3,0.401,4,0.401,5,0.401,7,0.401,8,1.113,11,1.774,14,0.061,16,1.681,18,0.783,19,0.783,20,1.163,21,0.783,23,1.508,24,1.11,30,0.954,48,0.482,49,0.193,50,0.671,57,1.11,62,2.082,63,1.295,64,1.24,78,1.464,98,1.763,99,2.639,105,1.24,107,1.507,117,0.025,118,0.036,119,0.025,142,1.06,148,1.24,162,2.019,170,2.453,180,2.051,187,2.051,201,1.765,212,1.295,213,2.095,230,1.24,237,2.692,242,2.082,248,2.423,254,1.06,257,1.642,262,0.911,286,1.464,299,1.464,304,2.082,307,1.464,369,2.423,387,1.464,394,1.06,402,2.082,404,1.464,410,1.464,415,1.464,439,1.464,454,1.464,462,2.639,478,1.464,496,3.181,498,2.921,507,1.765,510,1.765,529,1.765,530,4.231,531,4.005,532,3.16,533,3.16,534,3.16,535,2.222,536,2.222,537,2.222,538,2.222,539,2.222,540,2.222,541,2.222,542,2.222,543,1.765,544,2.222,545,2.222,546,2.222,547,3.16,548,2.222,549,2.222,550,2.222,551,2.222,552,2.222,553,3.16,554,2.222,555,2.222,556,2.222,557,3.16,558,3.16,559,2.222,560,2.222,561,2.222,562,3.16,563,2.222,564,2.222]],["title/injectables/TransactionService.html",[133,0.784,209,0.784]],["body/injectables/TransactionService.html",[3,0.506,4,0.506,5,0.506,7,0.506,8,1.306,14,0.06,16,1.557,18,1.463,19,1.463,20,1.136,21,1.463,24,1.12,30,1.387,33,0.847,48,0.608,49,0.244,50,0.847,51,1.702,57,1.12,63,1.52,101,1.982,106,1.769,117,0.032,118,0.042,119,0.032,133,1.12,141,1.565,142,2.108,209,1.12,210,1.565,212,1.52,213,1.935,214,2.317,217,2.317,231,2.108,237,2.686,254,1.338,257,2.003,261,1.565,262,1.15,323,1.849,512,2.229,513,3.51,515,2.946,521,2.229,522,2.229,523,2.229,565,2.229,566,3.708,567,3.708,568,2.805,569,3.708,570,2.805,571,2.805,572,3.708,573,2.805,574,2.805,575,2.805,576,2.805,577,2.805,578,3.708,579,2.805,580,2.805]],["title/coverage.html",[581,2.32]],["body/coverage.html",[0,1.933,1,1.933,5,0.625,6,2.752,14,0.059,20,0.891,39,0.891,41,1.221,49,0.399,105,2.866,117,0.039,118,0.048,119,0.039,126,1.653,133,1.046,147,1.653,149,2.752,173,1.653,205,1.42,209,1.384,211,2.795,257,1.42,260,1.653,262,1.42,495,2.752,511,2.752,529,2.752,565,2.752,581,2.283,582,3.464,583,3.464,584,3.464,585,3.464,586,3.464,587,3.464,588,3.464,589,2.752,590,3.464,591,3.464,592,3.464,593,3.464,594,4.241,595,3.464,596,3.464]],["title/dependencies.html",[123,1.487,597,2.18]],["body/dependencies.html",[14,0.06,33,1.114,36,2.059,37,2.059,43,2.932,117,0.042,118,0.05,119,0.042,123,1.761,141,2.059,142,1.761,254,1.761,255,2.432,394,1.761,543,2.932,598,4.406,599,3.69,600,3.69,601,3.69,602,3.69,603,3.69,604,3.69,605,3.69,606,3.69,607,3.69,608,3.69,609,3.69,610,3.69,611,3.69,612,3.69,613,3.69]],["title/miscellaneous/enumerations.html",[614,1.216,615,2.476]],["body/miscellaneous/enumerations.html",[3,0.696,7,0.696,14,0.058,109,3.065,117,0.044,118,0.051,119,0.044,165,2.362,216,2.981,467,2.543,614,2.153,615,3.065,616,3.858,617,3.858,618,3.858,619,3.858,620,3.858,621,3.858,622,3.858]],["title/miscellaneous/functions.html",[614,1.216,623,2.476]],["body/miscellaneous/functions.html",[7,0.72,14,0.055,24,1.206,117,0.045,118,0.052,119,0.045,126,2.323,231,1.906,589,3.174,614,2.229,623,3.174,624,3.995]],["title/index.html",[7,0.393,625,2.18,626,2.18]],["body/index.html",[4,0.577,14,0.059,28,1.787,62,2.111,74,2.544,117,0.036,118,0.046,119,0.036,340,2.111,345,2.111,379,2.111,380,2.111,430,2.111,581,2.111,627,3.203,628,3.203,629,4.039,630,3.203,631,3.203,632,3.203,633,3.203,634,3.203,635,3.203,636,3.203,637,3.203,638,3.203,639,4.424,640,3.203,641,3.203,642,3.203,643,4.965,644,3.203,645,3.203,646,4.891,647,3.203,648,3.203,649,4.039,650,3.203,651,3.203,652,3.203,653,3.203,654,4.039,655,4.039,656,3.203,657,3.203,658,3.203,659,4.039,660,4.039,661,3.203,662,3.203,663,3.203,664,3.203,665,2.544,666,3.203,667,3.203,668,3.203,669,3.203,670,3.203,671,3.203,672,3.203,673,3.203,674,3.203,675,3.203,676,3.203,677,3.203,678,3.203,679,3.203]],["title/modules.html",[122,1.68]],["body/modules.html",[14,0.052,117,0.045,118,0.052,119,0.045,121,2.229,122,1.906,132,1.906,665,3.667,680,4.616,681,4.616,682,4.616]],["title/overview.html",[683,2.797]],["body/overview.html",[0,1.943,14,0.058,39,1.231,117,0.039,118,0.048,119,0.039,120,1.661,121,2.847,122,1.661,123,1.661,124,2.295,125,2.295,126,1.661,127,2.295,128,2.295,129,2.766,130,2.766,131,2.766,132,2.453,133,1.445,134,2.804,135,2.295,136,1.661,148,1.943,203,2.766,204,2.766,205,1.883,210,1.943,260,1.661,394,2.03,683,2.766,684,3.482,685,4.254]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"classes/Transaction.html":{},"coverage.html":{}}}],["0.1.13",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":394,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{},"dependencies.html":{},"overview.html":{}}}],["1.2.5",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["10^decimalplaces",{"_index":552,"title":{},"body":{"classes/Transaction.html":{}}}],["11.5.1",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["13.37",{"_index":317,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["16264493",{"_index":622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["16751112",{"_index":620,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2",{"_index":684,"title":{},"body":{"overview.html":{}}}],["2711204",{"_index":618,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":685,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["3.1.9",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["6.10.14",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["6.11.5",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["6005828",{"_index":619,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_profile",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["_redis",{"_index":515,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["_redis.getclient",{"_index":523,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["_transaction",{"_index":226,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["accepted",{"_index":289,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["accepts",{"_index":320,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["account",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["accounting",{"_index":255,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"dependencies.html":{}}}],["accounting.unformat(value.tostring",{"_index":493,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["action",{"_index":248,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["again",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["already",{"_index":331,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["amazing",{"_index":666,"title":{},"body":{"index.html":{}}}],["amount",{"_index":187,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["angular",{"_index":637,"title":{},"body":{"index.html":{}}}],["anyone",{"_index":416,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["anything",{"_index":365,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["app",{"_index":380,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["app.controller",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":634,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":121,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":147,"title":{"classes/Args.html":{}},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"coverage.html":{}}}],["args(message.content",{"_index":276,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["args.findfirstnumber(1",{"_index":398,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["args.findkeyword(this.getkeywords('action",{"_index":434,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["args.findkeyword(this.getkeywords('currency",{"_index":393,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["args[0",{"_index":279,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["array",{"_index":151,"title":{},"body":{"classes/Args.html":{}}}],["array.prototype.concat(...object.entries(discordservice.keywords).map(([key",{"_index":485,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["asked",{"_index":342,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["async",{"_index":217,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["attachment",{"_index":252,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["attachment(`i'm",{"_index":488,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["author",{"_index":673,"title":{},"body":{"index.html":{}}}],["authorise",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["authorise(@query('code",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["authorise(code",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["authorised",{"_index":218,"title":{},"body":{"injectables/DiscordService.html":{}}}],["authorised(user",{"_index":228,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["authorization_code",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["available",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{}}}],["await",{"_index":323,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/TransactionService.html":{}}}],["awesome",{"_index":415,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["back",{"_index":344,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["backers",{"_index":667,"title":{},"body":{"index.html":{}}}],["balance",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{}}}],["balance\\n\\n",{"_index":298,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["before",{"_index":305,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["begin",{"_index":295,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["between",{"_index":439,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["blocked",{"_index":364,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["boolean",{"_index":170,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["bootstrap",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":318,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["browse",{"_index":682,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":680,"title":{},"body":{"modules.html":{}}}],["building",{"_index":630,"title":{},"body":{"index.html":{}}}],["c",{"_index":202,"title":{},"body":{"classes/Args.html":{}}}],["c.send(`hey",{"_index":457,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["c.touppercase()).join",{"_index":322,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["cache",{"_index":544,"title":{},"body":{"classes/Transaction.html":{}}}],["can't",{"_index":443,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["case",{"_index":280,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["catcherror",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["catcherror(e",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["channel",{"_index":334,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["channel.send",{"_index":336,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["check",{"_index":366,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["class",{"_index":49,"title":{"classes/Args.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["classes",{"_index":148,"title":{},"body":{"classes/Args.html":{},"classes/Profile.html":{},"classes/Transaction.html":{},"overview.html":{}}}],["click",{"_index":347,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["client",{"_index":214,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["client_id",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["client_secret",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["cluster_appmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_discordmodule",{"_index":203,"title":{},"body":{"modules/DiscordModule.html":{},"overview.html":{}}}],["cluster_discordmodule_providers",{"_index":204,"title":{},"body":{"modules/DiscordModule.html":{},"overview.html":{}}}],["code",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["colours",{"_index":216,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"miscellaneous/enumerations.html":{}}}],["combine",{"_index":199,"title":{},"body":{"classes/Args.html":{}}}],["combineargs",{"_index":152,"title":{},"body":{"classes/Args.html":{}}}],["combineargs(excludes",{"_index":160,"title":{},"body":{"classes/Args.html":{}}}],["commands",{"_index":285,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["common",{"_index":550,"title":{},"body":{"classes/Transaction.html":{}}}],["comparison",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["config",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["config.get('wallet.client",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["config.get('wallet.redirect_uri",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["config.get('wallet.secret",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["config.get('wallet.secret')).tostring(enc.hex",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["confirm",{"_index":304,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["confirmation",{"_index":353,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["confirmation.amount",{"_index":460,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["confirmation.currency",{"_index":461,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["confirmation.sender).username",{"_index":459,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["confirmation.users.foreach((u",{"_index":453,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["console.log('discord",{"_index":273,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["console.log('received",{"_index":277,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["console.log('token",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log('wallet",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["console.warn(e",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["constructor",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["constructor(_profile",{"_index":225,"title":{},"body":{"injectables/DiscordService.html":{}}}],["constructor(_redis",{"_index":512,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["constructor(data",{"_index":497,"title":{},"body":{"classes/Profile.html":{}}}],["constructor(message",{"_index":532,"title":{},"body":{"classes/Transaction.html":{}}}],["constructor(private",{"_index":522,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["constructor(s",{"_index":157,"title":{},"body":{"classes/Args.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["convert",{"_index":404,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["copy",{"_index":436,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["core/args",{"_index":259,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["core/colours.enum",{"_index":256,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["core/profile",{"_index":520,"title":{},"body":{"injectables/ProfileService.html":{}}}],["core/transaction",{"_index":571,"title":{},"body":{"injectables/TransactionService.html":{}}}],["couldn't",{"_index":360,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["couldn\\'t",{"_index":449,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["coverage",{"_index":581,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["crypto",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"dependencies.html":{}}}],["currencies",{"_index":287,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["currencies\\n\\n",{"_index":290,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["currencies`\\n\\n",{"_index":293,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["currency",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}}}],["currencys",{"_index":291,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["d",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["d.data.access_token",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["danger",{"_index":621,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}}}],["database",{"_index":577,"title":{},"body":{"injectables/TransactionService.html":{}}}],["dec",{"_index":547,"title":{},"body":{"classes/Transaction.html":{}}}],["dec.decimalplaces",{"_index":554,"title":{},"body":{"classes/Transaction.html":{}}}],["dec.times(new",{"_index":555,"title":{},"body":{"classes/Transaction.html":{}}}],["decimal",{"_index":402,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["decimal(10).pow(dec.decimalplaces",{"_index":556,"title":{},"body":{"classes/Transaction.html":{}}}],["decimal(this.amount",{"_index":548,"title":{},"body":{"classes/Transaction.html":{}}}],["decimal.js",{"_index":543,"title":{},"body":{"classes/Transaction.html":{},"dependencies.html":{}}}],["declarations",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["default",{"_index":164,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["delete",{"_index":573,"title":{},"body":{"injectables/TransactionService.html":{}}}],["denominator",{"_index":551,"title":{},"body":{"classes/Transaction.html":{}}}],["dependencies",{"_index":123,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":638,"title":{},"body":{"index.html":{}}}],["development",{"_index":645,"title":{},"body":{"index.html":{}}}],["directed",{"_index":343,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["directly",{"_index":381,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["disable",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["discord.js",{"_index":254,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"dependencies.html":{}}}],["discord/discord.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["discordmodule",{"_index":132,"title":{"modules/DiscordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"modules.html":{},"overview.html":{}}}],["discordservice",{"_index":205,"title":{"injectables/DiscordService.html":{}},"body":{"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"coverage.html":{},"overview.html":{}}}],["discordservice.formatcurrency(transaction.amount",{"_index":403,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["discordservice.keywords.currency.map((c",{"_index":321,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["discordservice.keywords[type",{"_index":486,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["dm",{"_index":333,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["dm'd",{"_index":357,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["dm.send(`awesome",{"_index":474,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["dm\\'d",{"_index":466,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["dmchannel",{"_index":253,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["documentation",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":445,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["e2e",{"_index":656,"title":{},"body":{"index.html":{}}}],["each",{"_index":249,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["efficient",{"_index":631,"title":{},"body":{"index.html":{}}}],["enc",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["enumerations",{"_index":615,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["eslint",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["eslint/camelcase",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["eslint/no",{"_index":482,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["eur'].includes(currency",{"_index":492,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["everyone",{"_index":465,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["everything\\'s",{"_index":464,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["ex",{"_index":314,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["exchange",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["excludes",{"_index":166,"title":{},"body":{"classes/Args.html":{}}}],["excludes.includes(c",{"_index":189,"title":{},"body":{"classes/Args.html":{}}}],["execute",{"_index":530,"title":{},"body":{"classes/Transaction.html":{}}}],["export",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["exports",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["express",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":150,"title":{},"body":{"classes/Args.html":{}}}],["false",{"_index":192,"title":{},"body":{"classes/Args.html":{},"classes/Profile.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["filter((v",{"_index":183,"title":{},"body":{"classes/Args.html":{}}}],["find",{"_index":185,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["findfirstnumber",{"_index":153,"title":{},"body":{"classes/Args.html":{}}}],["findfirstnumber(offset",{"_index":167,"title":{},"body":{"classes/Args.html":{}}}],["findkeyword",{"_index":154,"title":{},"body":{"classes/Args.html":{}}}],["findkeyword(keywords",{"_index":171,"title":{},"body":{"classes/Args.html":{}}}],["findkeywords",{"_index":155,"title":{},"body":{"classes/Args.html":{}}}],["findkeywords(keywords",{"_index":174,"title":{},"body":{"classes/Args.html":{}}}],["first",{"_index":186,"title":{},"body":{"classes/Args.html":{}}}],["format",{"_index":401,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["formatcurrency",{"_index":219,"title":{},"body":{"injectables/DiscordService.html":{}}}],["formatcurrency(value",{"_index":232,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["framework",{"_index":629,"title":{},"body":{"index.html":{}}}],["full",{"_index":376,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["function",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":623,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('authorise",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":516,"title":{},"body":{"injectables/ProfileService.html":{}}}],["get(message",{"_index":567,"title":{},"body":{"injectables/TransactionService.html":{}}}],["getkeywords",{"_index":220,"title":{},"body":{"injectables/DiscordService.html":{}}}],["getkeywords(type",{"_index":234,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["getting",{"_index":625,"title":{"index.html":{}},"body":{}}],["global",{"_index":207,"title":{},"body":{"modules/DiscordModule.html":{}}}],["grant_type",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["group",{"_index":386,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["grow",{"_index":662,"title":{},"body":{"index.html":{}}}],["guild",{"_index":354,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["handle",{"_index":267,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["hasn't",{"_index":428,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["haven't",{"_index":477,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["heavily",{"_index":635,"title":{},"body":{"index.html":{}}}],["help",{"_index":281,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["here",{"_index":340,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["hmac",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["http",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["httpmodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["https://media1.tenor.com/images/86937766f3f44884362c716e8f1d0e19/tenor.gif",{"_index":490,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["https://nestjs.com",{"_index":676,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["i'll",{"_index":387,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["i'm",{"_index":363,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["id",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{}}}],["identifier",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["imports",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["injectable",{"_index":209,"title":{"injectables/DiscordService.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/DiscordService.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{},"overview.html":{}}}],["input",{"_index":491,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["inspired",{"_index":636,"title":{},"body":{"index.html":{}}}],["installation",{"_index":642,"title":{},"body":{"index.html":{}}}],["installed",{"_index":383,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["installrunning",{"_index":644,"title":{},"body":{"index.html":{}}}],["interface",{"_index":260,"title":{"interfaces/Keywords.html":{}},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":494,"title":{},"body":{"interfaces/Keywords.html":{}}}],["invalid",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["ioredis",{"_index":521,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["isnumber",{"_index":156,"title":{},"body":{"classes/Args.html":{}}}],["isnumber(value",{"_index":176,"title":{},"body":{"classes/Args.html":{}}}],["it's",{"_index":382,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["join",{"_index":430,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["js",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"dependencies.html":{}}}],["json.parse",{"_index":579,"title":{},"body":{"injectables/TransactionService.html":{}}}],["json.parse(await",{"_index":527,"title":{},"body":{"injectables/ProfileService.html":{}}}],["json.stringify(this",{"_index":510,"title":{},"body":{"classes/Profile.html":{},"classes/Transaction.html":{}}}],["kamil",{"_index":674,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":479,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["keyword",{"_index":196,"title":{},"body":{"classes/Args.html":{}}}],["keywords",{"_index":173,"title":{"interfaces/Keywords.html":{}},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"coverage.html":{}}}],["keywords.includes(c",{"_index":197,"title":{},"body":{"classes/Args.html":{}}}],["knightofhonour",{"_index":316,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["know",{"_index":438,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["legend",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["license",{"_index":679,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":660,"title":{},"body":{"index.html":{}}}],["line",{"_index":481,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["link",{"_index":294,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["linkcheck",{"_index":221,"title":{},"body":{"injectables/DiscordService.html":{}}}],["linkcheck(user",{"_index":236,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["linked",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{}}}],["linking",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["literal",{"_index":500,"title":{},"body":{"classes/Profile.html":{}}}],["log",{"_index":272,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["login",{"_index":270,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["looks",{"_index":329,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["lowest",{"_index":549,"title":{},"body":{"classes/Transaction.html":{}}}],["make",{"_index":361,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["map",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["map((v",{"_index":181,"title":{},"body":{"classes/Args.html":{}}}],["map(d",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["map(token",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["matching",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["mention",{"_index":417,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["mentioned",{"_index":391,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message",{"_index":237,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["message.author.createdm",{"_index":335,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.author.id",{"_index":410,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["message.author.tostring",{"_index":339,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.channel.send",{"_index":282,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.channel.send(`currently",{"_index":319,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.guild",{"_index":355,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.guild.member(u)).map(u",{"_index":412,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.mentions.users.array().filter(u",{"_index":408,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply",{"_index":375,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply('sure",{"_index":447,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply('will",{"_index":463,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`${unlinked.length",{"_index":427,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`available",{"_index":370,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`awesome",{"_index":395,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`can",{"_index":435,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`hey",{"_index":358,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`it",{"_index":328,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`shhh",{"_index":468,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`that",{"_index":414,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`uhhh",{"_index":399,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`well",{"_index":442,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(`you",{"_index":356,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(new",{"_index":487,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["message.reply(transaction.tostring",{"_index":441,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["metadata",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["miscellaneous",{"_index":614,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":659,"title":{},"body":{"index.html":{}}}],["mode",{"_index":649,"title":{},"body":{"index.html":{}}}],["module",{"_index":120,"title":{"modules/AppModule.html":{},"modules/DiscordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["modules",{"_index":122,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"modules.html":{},"overview.html":{}}}],["money",{"_index":302,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["monitor",{"_index":274,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["more",{"_index":670,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":431,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["myśliwiec",{"_index":675,"title":{},"body":{"index.html":{}}}],["n",{"_index":562,"title":{},"body":{"classes/Transaction.html":{}}}],["n\\n",{"_index":286,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["name",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["need",{"_index":388,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["needed",{"_index":405,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["nest",{"_index":639,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":678,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":262,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["next",{"_index":480,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["node.js",{"_index":628,"title":{},"body":{"index.html":{}}}],["notequal",{"_index":168,"title":{},"body":{"classes/Args.html":{}}}],["notequal.includes(parsefloat(amount",{"_index":194,"title":{},"body":{"classes/Args.html":{}}}],["now",{"_index":396,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["npm",{"_index":643,"title":{},"body":{"index.html":{}}}],["nr",{"_index":283,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["nsend",{"_index":564,"title":{},"body":{"classes/Transaction.html":{}}}],["null",{"_index":534,"title":{},"body":{"classes/Transaction.html":{}}}],["number",{"_index":162,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}}}],["nygmarose",{"_index":315,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["object",{"_index":498,"title":{},"body":{"classes/Profile.html":{},"classes/Transaction.html":{}}}],["object.assign",{"_index":526,"title":{},"body":{"injectables/ProfileService.html":{}}}],["object.assign(this",{"_index":507,"title":{},"body":{"classes/Profile.html":{},"classes/Transaction.html":{}}}],["observable",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["occured",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["of('error",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["offset",{"_index":161,"title":{},"body":{"classes/Args.html":{}}}],["once",{"_index":346,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["online",{"_index":378,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["onmessage",{"_index":222,"title":{},"body":{"injectables/DiscordService.html":{}}}],["onmessage(message",{"_index":239,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["onready",{"_index":223,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["open",{"_index":379,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["optional",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["out",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"overview.html":{}}}],["out\\n\\n",{"_index":306,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["overview",{"_index":683,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.linked",{"_index":425,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["package",{"_index":597,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["parsefloat(amount",{"_index":195,"title":{},"body":{"classes/Args.html":{}}}],["paste",{"_index":437,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["pay",{"_index":444,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["payment",{"_index":308,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["pending",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/TransactionService.html":{}}}],["perform",{"_index":432,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["pipe",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["please",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["private",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["production",{"_index":651,"title":{},"body":{"index.html":{}}}],["profile",{"_index":41,"title":{"classes/Profile.html":{}},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["profile.createdm",{"_index":473,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["profile.tojson",{"_index":525,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.tostring",{"_index":475,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["profiles",{"_index":419,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["profiles.filter((p",{"_index":424,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["profileservice",{"_index":39,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":627,"title":{},"body":{"index.html":{}}}],["project",{"_index":661,"title":{},"body":{"index.html":{}}}],["promise",{"_index":231,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":420,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["properties",{"_index":212,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["providers",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["public",{"_index":213,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["pull",{"_index":576,"title":{},"body":{"injectables/TransactionService.html":{}}}],["query",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["query('state",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["read",{"_index":669,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["ready",{"_index":263,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["receiving\\n\\n",{"_index":297,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["recieved",{"_index":266,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["recipients",{"_index":452,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["redirect_uri",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["redis",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"dependencies.html":{}}}],["redismodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["redismodule.register(config.get('redis",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["redisservice",{"_index":513,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["reflect",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["reply",{"_index":325,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["repository",{"_index":641,"title":{},"body":{"index.html":{}}}],["reset",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}],["response",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["result",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{}}}],["returned",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"miscellaneous/functions.html":{}}}],["richembed",{"_index":251,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["right",{"_index":349,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["rimraf",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":646,"title":{},"body":{"index.html":{}}}],["running",{"_index":275,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["rxjs",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["s",{"_index":159,"title":{},"body":{"classes/Args.html":{}}}],["s.tolowercase",{"_index":179,"title":{},"body":{"classes/Args.html":{}}}],["same",{"_index":292,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sauce",{"_index":311,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["save",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["save(profile",{"_index":518,"title":{},"body":{"injectables/ProfileService.html":{}}}],["save(transaction",{"_index":569,"title":{},"body":{"injectables/TransactionService.html":{}}}],["scalable",{"_index":632,"title":{},"body":{"index.html":{}}}],["see",{"_index":400,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["send",{"_index":299,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["send'}:\\n\\n",{"_index":559,"title":{},"body":{"classes/Transaction.html":{}}}],["sender",{"_index":462,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["sending",{"_index":296,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sent",{"_index":377,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["server",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"classes/Transaction.html":{},"index.html":{}}}],["services/discord/discord.service",{"_index":208,"title":{},"body":{"modules/DiscordModule.html":{}}}],["set",{"_index":307,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["set)\\n\\n",{"_index":310,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["setcolor(discordservice.colours.info",{"_index":350,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["setcolor(discordservice.colours.success",{"_index":384,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["setdescription(`hey",{"_index":338,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["setthumbnail('https://glamsquad.sgp1.cdn.digitaloceanspaces.com/socialhub/default/images/logo_transparent%20white.png",{"_index":352,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["settitle('nr",{"_index":337,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["seturl(`${config.get('wallet.endpoint')}/oauth/authorize?client_id=${config.get('wallet.client')}&redirect_uri=${config.get('wallet.redirect_uri')}&response_type=code&scope=${config.get('wallet.scope')}&state=${message.author.id},${sha256(message.author.id",{"_index":351,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["seturl(config.get('wallet.app",{"_index":385,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sgd",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sha256",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sha256(id",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["shared/core/profile",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["shared/core/transaction",{"_index":258,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["shared/services/profile/profile.service",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["shared/services/transaction/transaction.service",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["shouldn't",{"_index":469,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["side",{"_index":633,"title":{},"body":{"index.html":{}}}],["someone",{"_index":389,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["someone\\n\\n",{"_index":303,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sorry",{"_index":489,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Args.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"index.html":{}}}],["source`\\n\\n",{"_index":312,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["sources",{"_index":309,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{}}}],["split",{"_index":180,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["sponsors",{"_index":664,"title":{},"body":{"index.html":{}}}],["src/.../colours.enum.ts",{"_index":616,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":624,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:18",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["src/discord/core/args.ts",{"_index":149,"title":{},"body":{"classes/Args.html":{},"coverage.html":{}}}],["src/discord/core/args.ts:1",{"_index":158,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/args.ts:13",{"_index":169,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/args.ts:25",{"_index":172,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/args.ts:34",{"_index":175,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/args.ts:43",{"_index":163,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/args.ts:50",{"_index":177,"title":{},"body":{"classes/Args.html":{}}}],["src/discord/core/colours.enum.ts",{"_index":617,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/discord/discord.module.ts",{"_index":206,"title":{},"body":{"modules/DiscordModule.html":{}}}],["src/discord/services/discord/discord.service.ts",{"_index":211,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"coverage.html":{}}}],["src/discord/services/discord/discord.service.ts:20",{"_index":245,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:21",{"_index":246,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:22",{"_index":250,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:254",{"_index":229,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:260",{"_index":238,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:267",{"_index":235,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:276",{"_index":244,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:281",{"_index":233,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:30",{"_index":227,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:49",{"_index":241,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/discord/services/discord/discord.service.ts:54",{"_index":240,"title":{},"body":{"injectables/DiscordService.html":{}}}],["src/main.ts",{"_index":589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/core/profile.ts",{"_index":495,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/shared/core/profile.ts:10",{"_index":499,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:17",{"_index":506,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:2",{"_index":505,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:3",{"_index":501,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:7",{"_index":502,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:8",{"_index":504,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/profile.ts:9",{"_index":503,"title":{},"body":{"classes/Profile.html":{}}}],["src/shared/core/transaction.ts",{"_index":529,"title":{},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["src/shared/core/transaction.ts:10",{"_index":539,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:11",{"_index":533,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:20",{"_index":540,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:31",{"_index":542,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:37",{"_index":541,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:6",{"_index":537,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:7",{"_index":538,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:8",{"_index":535,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/core/transaction.ts:9",{"_index":536,"title":{},"body":{"classes/Transaction.html":{}}}],["src/shared/services/profile/profile.service.ts",{"_index":511,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/shared/services/profile/profile.service.ts:15",{"_index":519,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/shared/services/profile/profile.service.ts:20",{"_index":517,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/shared/services/profile/profile.service.ts:8",{"_index":514,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/shared/services/transaction/transaction.service.ts",{"_index":565,"title":{},"body":{"injectables/TransactionService.html":{},"coverage.html":{}}}],["src/shared/services/transaction/transaction.service.ts:16",{"_index":570,"title":{},"body":{"injectables/TransactionService.html":{}}}],["src/shared/services/transaction/transaction.service.ts:23",{"_index":568,"title":{},"body":{"injectables/TransactionService.html":{}}}],["src/shared/services/transaction/transaction.service.ts:9",{"_index":566,"title":{},"body":{"injectables/TransactionService.html":{}}}],["start",{"_index":647,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":650,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":652,"title":{},"body":{"index.html":{}}}],["started",{"_index":626,"title":{"index.html":{}},"body":{}}],["starter",{"_index":640,"title":{},"body":{"index.html":{}}}],["state",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["state.split(',')[0",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["state.split(',')[1",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["statements",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":215,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["status",{"_index":326,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["stay",{"_index":671,"title":{},"body":{"index.html":{}}}],["string",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{}}}],["success",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/enumerations.html":{}}}],["successfully",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["super",{"_index":178,"title":{},"body":{"classes/Args.html":{}}}],["support",{"_index":665,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":362,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["svg",{"_index":681,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":278,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["t",{"_index":201,"title":{},"body":{"classes/Args.html":{},"classes/Transaction.html":{}}}],["table",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["talk",{"_index":470,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["tap",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["tap(d",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["tap(token",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["test",{"_index":655,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":658,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":657,"title":{},"body":{"index.html":{}}}],["tests",{"_index":654,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":663,"title":{},"body":{"index.html":{}}}],["they're",{"_index":418,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["thing",{"_index":448,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this._profile.get(message.author.id",{"_index":324,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this._profile.get(u",{"_index":422,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this._profile.save(new",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["this._transaction.get(message",{"_index":446,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this._transaction.save(transaction",{"_index":440,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.action",{"_index":558,"title":{},"body":{"classes/Transaction.html":{}}}],["this.amount",{"_index":560,"title":{},"body":{"classes/Transaction.html":{}}}],["this.client",{"_index":261,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"injectables/TransactionService.html":{}}}],["this.client.get(`transaction:${message.guild.id}:${message.author.id",{"_index":580,"title":{},"body":{"injectables/TransactionService.html":{}}}],["this.client.get(`user:${id",{"_index":528,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.client.login(config.get('discord_token",{"_index":271,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.client.on('message",{"_index":268,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.client.once('ready",{"_index":264,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.client.set(`transaction:${message.guild.id}:${message.author.id",{"_index":574,"title":{},"body":{"injectables/TransactionService.html":{}}}],["this.client.set(`user:${profile.id",{"_index":524,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.client.users.find('id",{"_index":455,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.client.users.find(u",{"_index":471,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.currency",{"_index":557,"title":{},"body":{"classes/Transaction.html":{}}}],["this.filter((c",{"_index":198,"title":{},"body":{"classes/Args.html":{}}}],["this.find((c",{"_index":188,"title":{},"body":{"classes/Args.html":{}}}],["this.http.post(`${config.get('wallet.endpoint')}/oauth/token",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["this.isnumber(amount",{"_index":193,"title":{},"body":{"classes/Args.html":{}}}],["this.isnumber(c",{"_index":190,"title":{},"body":{"classes/Args.html":{}}}],["this.linkcheck(user",{"_index":367,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.linked",{"_index":508,"title":{},"body":{"classes/Profile.html":{}}}],["this.message",{"_index":545,"title":{},"body":{"classes/Transaction.html":{}}}],["this.onmessage.bind(this",{"_index":269,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.onready.bind(this",{"_index":265,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["this.reduce",{"_index":200,"title":{},"body":{"classes/Args.html":{}}}],["this.sender",{"_index":546,"title":{},"body":{"classes/Transaction.html":{}}}],["this.token",{"_index":509,"title":{},"body":{"classes/Profile.html":{}}}],["this.users.length",{"_index":561,"title":{},"body":{"classes/Transaction.html":{}}}],["this.users.reduce((t",{"_index":563,"title":{},"body":{"classes/Transaction.html":{}}}],["though",{"_index":450,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["title",{"_index":348,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["todo",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["tojson",{"_index":496,"title":{},"body":{"classes/Profile.html":{},"classes/Transaction.html":{}}}],["token",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}}}],["tostring",{"_index":531,"title":{},"body":{"classes/Transaction.html":{}}}],["total",{"_index":553,"title":{},"body":{"classes/Transaction.html":{}}}],["touch",{"_index":672,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":257,"title":{"classes/Transaction.html":{}},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["transaction(message",{"_index":390,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.action",{"_index":433,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.amount",{"_index":397,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.currency",{"_index":392,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.execute",{"_index":451,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.message",{"_index":572,"title":{},"body":{"injectables/TransactionService.html":{}}}],["transaction.tojson",{"_index":575,"title":{},"body":{"injectables/TransactionService.html":{}}}],["transaction.users",{"_index":407,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.users.length",{"_index":413,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transaction.users.map(u",{"_index":421,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["transactionservice",{"_index":133,"title":{"injectables/TransactionService.html":{}},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/TransactionService.html":{},"coverage.html":{},"overview.html":{}}}],["try",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["twitter",{"_index":677,"title":{},"body":{"index.html":{}}}],["tx",{"_index":578,"title":{},"body":{"injectables/TransactionService.html":{}}}],["type",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{},"injectables/TransactionService.html":{},"coverage.html":{}}}],["typescript",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["u",{"_index":454,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["u.bot",{"_index":411,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["u.createdm().then((c",{"_index":456,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["u.id",{"_index":409,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["u.tostring",{"_index":458,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["uhm",{"_index":359,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unauthorised",{"_index":224,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unauthorised(message",{"_index":243,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unit",{"_index":653,"title":{},"body":{"index.html":{}}}],["unlinked",{"_index":423,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unlinked.length",{"_index":426,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unlinked.map((u",{"_index":429,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["unused",{"_index":483,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["up",{"_index":332,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["update",{"_index":368,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["usd",{"_index":247,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["use",{"_index":478,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["user",{"_index":230,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"injectables/ProfileService.html":{},"classes/Transaction.html":{}}}],["user.balance.available",{"_index":371,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.balance.pending",{"_index":373,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.currency",{"_index":374,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.currency}\\npending",{"_index":372,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.id",{"_index":472,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.linked",{"_index":327,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user.source.default",{"_index":406,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user1",{"_index":300,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["user2",{"_index":301,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["users",{"_index":369,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["v",{"_index":184,"title":{},"body":{"classes/Args.html":{}}}],["v.trim",{"_index":182,"title":{},"body":{"classes/Args.html":{}}}],["valid",{"_index":191,"title":{},"body":{"classes/Args.html":{}}}],["value",{"_index":165,"title":{},"body":{"classes/Args.html":{},"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Profile.html":{},"miscellaneous/enumerations.html":{}}}],["vars",{"_index":484,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["verify",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["view",{"_index":288,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["void",{"_index":242,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"classes/Transaction.html":{}}}],["wallet",{"_index":284,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["wallet\\n\\n",{"_index":313,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["warning",{"_index":467,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"miscellaneous/enumerations.html":{}}}],["watch",{"_index":648,"title":{},"body":{"index.html":{}}}],["we've",{"_index":476,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["website",{"_index":345,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{},"index.html":{}}}],["yes",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/Args.html":{},"injectables/DiscordService.html":{},"classes/Profile.html":{},"classes/Transaction.html":{}}}],["you'd",{"_index":668,"title":{},"body":{"index.html":{}}}],["you'll",{"_index":341,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["you're",{"_index":330,"title":{},"body":{"injectables/DiscordService.html":{},"interfaces/Keywords.html":{}}}],["zoom",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/DiscordModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorise\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authorise\n                        \n                        \n                    \n                \n            \n            \n                \nauthorise(code: string, state?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('authorise')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/camelcase */\nimport { Controller, Get, Query, HttpService } from '@nestjs/common';\nimport { SHA256, enc } from 'crypto-js';\nimport config from 'config';\nimport { ProfileService } from './shared/services/profile/profile.service';\nimport { Profile } from './shared/core/profile';\nimport { Observable, of } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators'\n\n@Controller()\nexport class AppController {\n    constructor(\n        private readonly http: HttpService,\n        private _profile: ProfileService\n    ) {}\n\n    @Get('authorise')\n    authorise(@Query('code') code: string, @Query('state') state?: string): Observable {\n        if (!code || !state) {\n            return of('Error, invalid information returned from server')\n        }\n\n        const id = state.split(',')[0]\n        const hmac = state.split(',')[1]\n        const comparison = SHA256(id, config.get('wallet.secret')).toString(enc.Hex)\n\n        // Verify state\n        if (comparison !== hmac) {\n            return of('Error Linking account, please try again')\n        }\n\n        // Exchange code for token\n        return this.http.post(`${config.get('wallet.endpoint')}/oauth/token`, {\n            grant_type: 'authorization_code',\n            client_id: config.get('wallet.client'),\n            client_secret: config.get('wallet.secret'),\n            redirect_uri: config.get('wallet.redirect_uri'),\n            code\n        }).pipe(\n            tap(d => console.log('Wallet server authorise response', d)),\n            map(d => d.data.access_token),\n            tap(token => console.log('Token:', token)),\n            map(token => {\n                // TODO: Get data from server\n\n                // Create profile and save\n                this._profile.save(new Profile({\n                    id,\n                    token,\n                    balance: {\n                        available: 0,\n                        pending: 0\n                    },\n                    currency: 'SGD'\n                }));\n\n                // Return success page\n                return 'Account successfully linked!'\n            }),\n            catchError(e => {\n                console.warn(e);\n                return 'Error occured';\n            })\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nDiscordModule\n\nDiscordModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDiscordModule->AppModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nAppModule -->\n\nProfileService->AppModule\n\n\n\n\n\nTransactionService\n\nTransactionService\n\nAppModule -->\n\nTransactionService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                        \n                            TransactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DiscordModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, HttpModule } from '@nestjs/common';\nimport { RedisModule } from 'nestjs-redis';\nimport { AppController } from './app.controller';\nimport { DiscordModule } from './discord/discord.module';\nimport config from 'config';\nimport { ProfileService } from './shared/services/profile/profile.service';\nimport { TransactionService } from './shared/services/transaction/transaction.service';\n\n@Module({\n    imports: [\n        HttpModule,\n        RedisModule.register(config.get('redis')),\n        DiscordModule\n    ],\n    controllers: [AppController],\n    providers: [\n        ProfileService,\n        TransactionService\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Args.html":{"url":"classes/Args.html","title":"class - Args","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Args\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/discord/core/args.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                combineArgs\n                            \n                            \n                                findFirstNumber\n                            \n                            \n                                findKeyword\n                            \n                            \n                                findKeywords\n                            \n                            \n                                    Private\n                                isNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s: string)\n                    \n                \n                        \n                            \n                                Defined in src/discord/core/args.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            combineArgs\n                        \n                        \n                    \n                \n            \n            \n                \ncombineArgs(excludes: string[], offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/core/args.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    excludes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findFirstNumber\n                        \n                        \n                    \n                \n            \n            \n                \nfindFirstNumber(offset: number, excludes?: string[], notEqual?: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/discord/core/args.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    excludes\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    notEqual\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findKeyword\n                        \n                        \n                    \n                \n            \n            \n                \nfindKeyword(keywords: string[], offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/core/args.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    keywords\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findKeywords\n                        \n                        \n                    \n                \n            \n            \n                \nfindKeywords(keywords: string[], offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/core/args.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    keywords\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array | boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isNumber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isNumber(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/core/args.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Args extends Array {\n    // Create args array from string\n    constructor(s: string) {\n        super(\n            ...s.toLowerCase()\n            .split(' ')\n            .map((v: string) => v.trim())\n            .filter((v: string) => v != '')\n        )\n    }\n\n    // Find first number in args\n    findFirstNumber(offset = 0, excludes?: string[], notEqual?: number[]): number | boolean {\n        // Find first amount in args\n        const amount = this.find((c, i) => i >= offset && !excludes.includes(c) && this.isNumber(c))\n\n        // Return valid number or false\n        if (amount && this.isNumber(amount) && !notEqual.includes(parseFloat(amount)) && parseFloat(amount) > 0) {\n            return parseFloat(amount)\n        }\n        return false\n    }\n\n    // Find keyword in args\n    findKeyword(keywords: string[], offset = 0): string | boolean {\n        // Find keyword\n        const keyword = this.find((c, i) => i >= offset && keywords.includes(c))\n\n        // Return currency or false\n        return keyword ? keyword : false\n    }\n\n    // Find keywords in args\n    findKeywords(keywords: string[], offset = 0): Array | boolean {\n        // Find keyword\n        const keyword = this.filter((c, i) => i >= offset && keywords.includes(c))\n\n        // Return currency or false\n        return keyword ? keyword : false\n    }\n\n    // Combine args into string\n    combineArgs(excludes: string[], offset = 0): string {\n        return this.reduce(\n            (t, c, i) => t += (i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DiscordModule.html":{"url":"modules/DiscordModule.html","title":"module - DiscordModule","body":"\n                   \n\n\n\n\n    Modules\n    DiscordModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DiscordModule\n\n\n\ncluster_DiscordModule_providers\n\n\n\n\nDiscordService\n\nDiscordService\n\n\n\nDiscordModule\n\nDiscordModule\n\nDiscordModule -->\n\nDiscordService->DiscordModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nDiscordModule -->\n\nProfileService->DiscordModule\n\n\n\n\n\nTransactionService\n\nTransactionService\n\nDiscordModule -->\n\nTransactionService->DiscordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/discord/discord.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DiscordService\n                        \n                        \n                            ProfileService\n                        \n                        \n                            TransactionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { DiscordService } from './services/discord/discord.service';\nimport { ProfileService } from '../shared/services/profile/profile.service';\nimport { TransactionService } from '../shared/services/transaction/transaction.service';\n\n@Global()\n@Module({\n    providers: [\n        DiscordService,\n        ProfileService,\n        TransactionService\n    ]\n})\nexport class DiscordModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiscordService.html":{"url":"injectables/DiscordService.html","title":"injectable - DiscordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DiscordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/discord/services/discord/discord.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                client\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                colours\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                keywords\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authorised\n                            \n                            \n                                    Private\n                                    Static\n                                formatCurrency\n                            \n                            \n                                    Private\n                                getKeywords\n                            \n                            \n                                    Private\n                                linkCheck\n                            \n                            \n                                    Private\n                                    Async\n                                onMessage\n                            \n                            \n                                    Private\n                                onReady\n                            \n                            \n                                    Private\n                                unauthorised\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_profile: ProfileService, _transaction: TransactionService)\n                    \n                \n                        \n                            \n                                Defined in src/discord/services/discord/discord.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _profile\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _transaction\n                                                  \n                                                        \n                                                                        TransactionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            authorised\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authorised(user: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:254\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            formatCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatCurrency(value: number, currency: string)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currency\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getKeywords\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeywords(type?)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            linkCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    linkCheck(user: Profile, message: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            onMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onMessage(message: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                            Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            onReady\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onReady()\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            unauthorised\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unauthorised(message: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/discord/services/discord/discord.service.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                            Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Client\n\n                        \n                    \n                        \n                            \n                                    Defined in src/discord/services/discord/discord.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            colours\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Colours\n                        \n                    \n                        \n                            \n                                    Defined in src/discord/services/discord/discord.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            keywords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Keywords\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        currency: [\n            'usd',\n            'sgd'\n        ], action: [\n            'split',\n            'each'\n        ]\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/discord/services/discord/discord.service.ts:22\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client, RichEmbed, Message, Attachment, User, DMChannel } from 'discord.js'\nimport { SHA256, enc } from 'crypto-js'\nimport accounting from 'accounting'\nimport config from 'config'\nimport { Colours } from '../../core/colours.enum'\nimport { Profile } from '../../../shared/core/profile'\nimport { Transaction } from '../../../shared/core/transaction';\nimport { ProfileService } from '../../../shared/services/profile/profile.service';\nimport { TransactionService } from '../../../shared/services/transaction/transaction.service';\nimport { Args } from '../../core/args';\n\ninterface Keywords {\n    currency: string[];\n    action: string[];\n}\n\n@Injectable()\nexport class DiscordService {\n    public client: Client\n    private static readonly colours = Colours\n    private static readonly keywords: Keywords = {\n        currency: [\n            'usd',\n            'sgd'\n        ], action: [\n            'split',\n            'each'\n        ]\n    }\n\n    constructor(\n        private _profile: ProfileService,\n        private _transaction: TransactionService\n    ) {\n        // Create client\n        this.client = new Client()\n\n        // On client ready\n        this.client.once('ready', this.onReady.bind(this))\n\n        // On message recieved handle return\n        this.client.on('message', this.onMessage.bind(this))\n\n        // Client login\n        this.client.login(config.get('discord_token'))\n    }\n\n    private onReady(): void {\n        // Log ready\n        console.log('Discord monitor running')\n    }\n\n    private async onMessage(message: Message): Promise {\n        let user: Profile\n        const args = new Args(message.content)\n        console.log('Received', args)\n\n        switch (args[0]) {\n            case '$help':\n                message.channel.send(\n                    '** NR Wallet Commands **\\n\\n' +\n                    '`$currencies` View accepted currencies\\n\\n' +\n                    '`$currencys` Same as `$currencies`\\n\\n' +\n                    '`$link` Link with NR Wallet to begin sending and receiving\\n\\n' +\n                    '`$balance` View linked wallet balance\\n\\n' +\n                    '`$send @user1 [@user2] amount currency [[each] [split]]` Send some money to someone\\n\\n' +\n                    '`$confirm` Confirm your transaction before we send it out\\n\\n' +\n                    '`$source [source]` View and set available payment sources (`$source` to view `$source [source]` to set)\\n\\n' +\n                    '`$sauce` Same as `$source`\\n\\n' +\n                    '`$wallet` Get a link to your NR Wallet\\n\\n' +\n                    '*Ex: $send @nygmarose @knightofhonour 13.37 SGD each*'\n                )\n                break\n\n            case '$currencies':\n            case '$currencys':\n                message.channel.send(`Currently NR Wallet accepts: ${DiscordService.keywords.currency.map((c: string) => c.toUpperCase()).join(', ')}`)\n                break\n\n            case '$link':\n                user = await this._profile.get(message.author.id)\n\n                // If user is linked reply with status\n                if (user.linked) {\n                    return message.reply(`It looks like you're already linked up`)\n                }\n\n                // Create DM channel\n                const channel = await message.author.createDM()\n\n                // Send link to channel\n                if (channel) {\n                    channel.send(\n                        new RichEmbed()\n                            .setTitle('NR Wallet Login Link')\n                            .setDescription(`Hey ${message.author.toString()}, you can link your wallet here. You'll be asked to login and then you'll be directed back to our website once your account is linked! Just click the title right there.`)\n                            .setColor(DiscordService.colours.info)\n                            .setURL(`${config.get('wallet.endpoint')}/oauth/authorize?client_id=${config.get('wallet.client')}&redirect_uri=${config.get('wallet.redirect_uri')}&response_type=code&scope=${config.get('wallet.scope')}&state=${message.author.id},${SHA256(message.author.id, config.get('wallet.secret')).toString(enc.Hex)}`)\n                            .setThumbnail('https://glamsquad.sgp1.cdn.digitaloceanspaces.com/SocialHub/default/images/Logo_Transparent%20White.png')\n                    )\n\n                    // Send confirmation if guild\n                    if (message.guild) {\n                        message.reply(`You got it, I DM'd you the link`)\n                    }\n                    return\n                }\n\n                // Send error if no channel\n                message.reply(`Hey uhm, I couldn't DM you, can you make sure I'm not blocked or anything?`)\n                break\n\n            case '$balance':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // TODO: Update user balance\n\n                // Send users available and pending balance\n                message.reply(`Available balance: ${user.balance.available} ${user.currency}\\nPending balance: ${user.balance.pending} ${user.currency}`)\n                break\n\n            case '$wallet':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                message.reply(\n                    new RichEmbed()\n                        .setTitle('NR Wallet')\n                        .setDescription(`Hey ${message.author.toString()}, you can check your full wallet here. You'll be sent to NR Wallet online, or you can open the app directly if it's installed! Just click the title right there.`)\n                        .setColor(DiscordService.colours.success)\n                        .setURL(config.get('wallet.app'))\n                        .setThumbnail('https://glamsquad.sgp1.cdn.digitaloceanspaces.com/SocialHub/default/images/Logo_Transparent%20White.png')\n                )\n                break\n\n            case '$send':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Check if DM or group\n                if (!message.guild) {\n                    return message.reply(`Hey ${message.author.toString()}, I'll need you to do that in a group to send to someone`)\n                }\n\n                // Create transaction\n                const transaction = new Transaction(message)\n\n                // Get currency mentioned\n                transaction.currency = args.findKeyword(this.getKeywords('currency'), 1)\n                if (!transaction.currency) {\n                    return message.reply(`Awesome. Now, can you send that again with a currency?`)\n                }\n\n                // Get amount mentioned\n                transaction.amount = args.findFirstNumber(1)\n                if (!transaction.amount) {\n                    return message.reply(`Uhhh I couldn't see any amount there`)\n                }\n\n                // Format amount to decimal number\n                transaction.amount = DiscordService.formatCurrency(transaction.amount as number, transaction.currency as string)\n\n                // TODO: Convert currencies if needed (transaction.amount -> user.source.default)\n\n                // Get users mentioned\n                transaction.users = message.mentions.users.array().filter(u => u.id !== message.author.id && !u.bot && !!message.guild.member(u)).map(u => u.id)\n\n                if (!transaction.users.length) {\n                    return message.reply(`That would be awesome but I couldn't see anyone to send to, make sure you mention them *and* they're in this group`)\n                }\n\n                // Check if users are all linked\n                const profiles: Profile[] = await Promise.all(\n                   transaction.users.map(u => this._profile.get(u))\n                )\n                const unlinked: Profile[] = profiles.filter((p: Profile) => !p.linked)\n                if (unlinked.length) {\n                    return message.reply(`${unlinked.length > 1 ? 'These users' : 'This user'} hasn't linked an account: ${unlinked.map((u: Profile) => ``).join(', ')}`)\n                }\n\n                // If multiple users check for action to perform\n                if (transaction.users.length > 1) {\n                    transaction.action = args.findKeyword(this.getKeywords('action'), 1)\n                    if (!transaction.action) {\n                        return message.reply(`Can you copy paste that message but let me know if I should send then ${transaction.amount} ${transaction.currency} \\`each\\` or should I \\`split\\` between them`)\n                    }\n                }\n\n                // Save transaction\n                this._transaction.save(transaction)\n\n                // Return confirmation message\n                return message.reply(transaction.toString())\n\n            case '$confirm':\n                // Check not a DM\n                if (!message.guild) {\n                    return message.reply(`Well you can't pay me so I don't have a transaction for this DM`)\n                }\n\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Get pending transaction\n                const confirmation = await this._transaction.get(message)\n\n                // Return an error if no pending transaction\n                if (!confirmation) {\n                    return message.reply('Sure thing! I couldn\\'t find anything to confirm though.')\n                }\n\n                // TODO: Send out the money\n                // transaction.execute()\n\n                // DM the recipients\n                confirmation.users.forEach((u: string | User) => {\n                    u = this.client.users.find('id', u)\n                    u.createDM().then((c: DMChannel) => {\n                        c.send(`Hey ${u.toString()}! ${this.client.users.find('id', confirmation.sender).username} sent a full ${confirmation.amount} ${confirmation.currency} to your NR Wallet!`)\n                    })\n                })\n\n                // Confirm with the sender\n                message.reply('Will do. Everything\\'s been sent out and everyone DM\\'d')\n                break\n\n            case '$source':\n            case '$sauce':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Send warning if guild\n                if (message.guild) {\n                    message.reply(`Shhh... we shouldn't talk about that here`)\n                }\n\n                // TODO: Get sources and send to DM\n                break\n        }\n    }\n\n    public async authorised(user: Profile): Promise {\n        const profile = this.client.users.find(u => u.id == user.id)\n        const dm = await profile.createDM()\n        return dm.send(`Awesome ${profile.toString()}, we've successfully linked your account!`)\n    }\n\n    private linkCheck(user: Profile, message: Message): boolean {\n        if (!user.linked) {\n            message.reply(`It looks like you haven't linked an account yet! Use \\`$link\\` to link with your NR Wallet account`)\n        }\n        return user.linked\n    }\n\n    private getKeywords(type?: keyof Keywords): string[] {\n        if (!type) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            return Array.prototype.concat(...Object.entries(DiscordService.keywords).map(([key, value]) => value))\n        }\n        return DiscordService.keywords[type] || []\n    }\n\n    // Reply with an unauthorised message\n    private unauthorised(message: Message): Promise {\n        return message.reply(new Attachment(`I'm sorry ${message.author.toString()}, I can't do that`, 'https://media1.tenor.com/images/86937766f3f44884362c716e8f1d0e19/tenor.gif'))\n    }\n\n    // Format currency input\n    private static formatCurrency(value: number, currency: string): number {\n        if (['EUR'].includes(currency)) {\n            return accounting.unformat(value.toString(), ',')\n        } else {\n            return accounting.unformat(value.toString())\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Keywords.html":{"url":"interfaces/Keywords.html","title":"interface - Keywords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Keywords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/discord/services/discord/discord.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        currency\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                    \n                                \n                                \n                                    \n                                        currency:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Client, RichEmbed, Message, Attachment, User, DMChannel } from 'discord.js'\nimport { SHA256, enc } from 'crypto-js'\nimport accounting from 'accounting'\nimport config from 'config'\nimport { Colours } from '../../core/colours.enum'\nimport { Profile } from '../../../shared/core/profile'\nimport { Transaction } from '../../../shared/core/transaction';\nimport { ProfileService } from '../../../shared/services/profile/profile.service';\nimport { TransactionService } from '../../../shared/services/transaction/transaction.service';\nimport { Args } from '../../core/args';\n\ninterface Keywords {\n    currency: string[];\n    action: string[];\n}\n\n@Injectable()\nexport class DiscordService {\n    public client: Client\n    private static readonly colours = Colours\n    private static readonly keywords: Keywords = {\n        currency: [\n            'usd',\n            'sgd'\n        ], action: [\n            'split',\n            'each'\n        ]\n    }\n\n    constructor(\n        private _profile: ProfileService,\n        private _transaction: TransactionService\n    ) {\n        // Create client\n        this.client = new Client()\n\n        // On client ready\n        this.client.once('ready', this.onReady.bind(this))\n\n        // On message recieved handle return\n        this.client.on('message', this.onMessage.bind(this))\n\n        // Client login\n        this.client.login(config.get('discord_token'))\n    }\n\n    private onReady(): void {\n        // Log ready\n        console.log('Discord monitor running')\n    }\n\n    private async onMessage(message: Message): Promise {\n        let user: Profile\n        const args = new Args(message.content)\n        console.log('Received', args)\n\n        switch (args[0]) {\n            case '$help':\n                message.channel.send(\n                    '** NR Wallet Commands **\\n\\n' +\n                    '`$currencies` View accepted currencies\\n\\n' +\n                    '`$currencys` Same as `$currencies`\\n\\n' +\n                    '`$link` Link with NR Wallet to begin sending and receiving\\n\\n' +\n                    '`$balance` View linked wallet balance\\n\\n' +\n                    '`$send @user1 [@user2] amount currency [[each] [split]]` Send some money to someone\\n\\n' +\n                    '`$confirm` Confirm your transaction before we send it out\\n\\n' +\n                    '`$source [source]` View and set available payment sources (`$source` to view `$source [source]` to set)\\n\\n' +\n                    '`$sauce` Same as `$source`\\n\\n' +\n                    '`$wallet` Get a link to your NR Wallet\\n\\n' +\n                    '*Ex: $send @nygmarose @knightofhonour 13.37 SGD each*'\n                )\n                break\n\n            case '$currencies':\n            case '$currencys':\n                message.channel.send(`Currently NR Wallet accepts: ${DiscordService.keywords.currency.map((c: string) => c.toUpperCase()).join(', ')}`)\n                break\n\n            case '$link':\n                user = await this._profile.get(message.author.id)\n\n                // If user is linked reply with status\n                if (user.linked) {\n                    return message.reply(`It looks like you're already linked up`)\n                }\n\n                // Create DM channel\n                const channel = await message.author.createDM()\n\n                // Send link to channel\n                if (channel) {\n                    channel.send(\n                        new RichEmbed()\n                            .setTitle('NR Wallet Login Link')\n                            .setDescription(`Hey ${message.author.toString()}, you can link your wallet here. You'll be asked to login and then you'll be directed back to our website once your account is linked! Just click the title right there.`)\n                            .setColor(DiscordService.colours.info)\n                            .setURL(`${config.get('wallet.endpoint')}/oauth/authorize?client_id=${config.get('wallet.client')}&redirect_uri=${config.get('wallet.redirect_uri')}&response_type=code&scope=${config.get('wallet.scope')}&state=${message.author.id},${SHA256(message.author.id, config.get('wallet.secret')).toString(enc.Hex)}`)\n                            .setThumbnail('https://glamsquad.sgp1.cdn.digitaloceanspaces.com/SocialHub/default/images/Logo_Transparent%20White.png')\n                    )\n\n                    // Send confirmation if guild\n                    if (message.guild) {\n                        message.reply(`You got it, I DM'd you the link`)\n                    }\n                    return\n                }\n\n                // Send error if no channel\n                message.reply(`Hey uhm, I couldn't DM you, can you make sure I'm not blocked or anything?`)\n                break\n\n            case '$balance':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // TODO: Update user balance\n\n                // Send users available and pending balance\n                message.reply(`Available balance: ${user.balance.available} ${user.currency}\\nPending balance: ${user.balance.pending} ${user.currency}`)\n                break\n\n            case '$wallet':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                message.reply(\n                    new RichEmbed()\n                        .setTitle('NR Wallet')\n                        .setDescription(`Hey ${message.author.toString()}, you can check your full wallet here. You'll be sent to NR Wallet online, or you can open the app directly if it's installed! Just click the title right there.`)\n                        .setColor(DiscordService.colours.success)\n                        .setURL(config.get('wallet.app'))\n                        .setThumbnail('https://glamsquad.sgp1.cdn.digitaloceanspaces.com/SocialHub/default/images/Logo_Transparent%20White.png')\n                )\n                break\n\n            case '$send':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Check if DM or group\n                if (!message.guild) {\n                    return message.reply(`Hey ${message.author.toString()}, I'll need you to do that in a group to send to someone`)\n                }\n\n                // Create transaction\n                const transaction = new Transaction(message)\n\n                // Get currency mentioned\n                transaction.currency = args.findKeyword(this.getKeywords('currency'), 1)\n                if (!transaction.currency) {\n                    return message.reply(`Awesome. Now, can you send that again with a currency?`)\n                }\n\n                // Get amount mentioned\n                transaction.amount = args.findFirstNumber(1)\n                if (!transaction.amount) {\n                    return message.reply(`Uhhh I couldn't see any amount there`)\n                }\n\n                // Format amount to decimal number\n                transaction.amount = DiscordService.formatCurrency(transaction.amount as number, transaction.currency as string)\n\n                // TODO: Convert currencies if needed (transaction.amount -> user.source.default)\n\n                // Get users mentioned\n                transaction.users = message.mentions.users.array().filter(u => u.id !== message.author.id && !u.bot && !!message.guild.member(u)).map(u => u.id)\n\n                if (!transaction.users.length) {\n                    return message.reply(`That would be awesome but I couldn't see anyone to send to, make sure you mention them *and* they're in this group`)\n                }\n\n                // Check if users are all linked\n                const profiles: Profile[] = await Promise.all(\n                   transaction.users.map(u => this._profile.get(u))\n                )\n                const unlinked: Profile[] = profiles.filter((p: Profile) => !p.linked)\n                if (unlinked.length) {\n                    return message.reply(`${unlinked.length > 1 ? 'These users' : 'This user'} hasn't linked an account: ${unlinked.map((u: Profile) => ``).join(', ')}`)\n                }\n\n                // If multiple users check for action to perform\n                if (transaction.users.length > 1) {\n                    transaction.action = args.findKeyword(this.getKeywords('action'), 1)\n                    if (!transaction.action) {\n                        return message.reply(`Can you copy paste that message but let me know if I should send then ${transaction.amount} ${transaction.currency} \\`each\\` or should I \\`split\\` between them`)\n                    }\n                }\n\n                // Save transaction\n                this._transaction.save(transaction)\n\n                // Return confirmation message\n                return message.reply(transaction.toString())\n\n            case '$confirm':\n                // Check not a DM\n                if (!message.guild) {\n                    return message.reply(`Well you can't pay me so I don't have a transaction for this DM`)\n                }\n\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Get pending transaction\n                const confirmation = await this._transaction.get(message)\n\n                // Return an error if no pending transaction\n                if (!confirmation) {\n                    return message.reply('Sure thing! I couldn\\'t find anything to confirm though.')\n                }\n\n                // TODO: Send out the money\n                // transaction.execute()\n\n                // DM the recipients\n                confirmation.users.forEach((u: string | User) => {\n                    u = this.client.users.find('id', u)\n                    u.createDM().then((c: DMChannel) => {\n                        c.send(`Hey ${u.toString()}! ${this.client.users.find('id', confirmation.sender).username} sent a full ${confirmation.amount} ${confirmation.currency} to your NR Wallet!`)\n                    })\n                })\n\n                // Confirm with the sender\n                message.reply('Will do. Everything\\'s been sent out and everyone DM\\'d')\n                break\n\n            case '$source':\n            case '$sauce':\n                user = await this._profile.get(message.author.id)\n\n                // Check if user is linked\n                if (!this.linkCheck(user, message)) return\n\n                // Send warning if guild\n                if (message.guild) {\n                    message.reply(`Shhh... we shouldn't talk about that here`)\n                }\n\n                // TODO: Get sources and send to DM\n                break\n        }\n    }\n\n    public async authorised(user: Profile): Promise {\n        const profile = this.client.users.find(u => u.id == user.id)\n        const dm = await profile.createDM()\n        return dm.send(`Awesome ${profile.toString()}, we've successfully linked your account!`)\n    }\n\n    private linkCheck(user: Profile, message: Message): boolean {\n        if (!user.linked) {\n            message.reply(`It looks like you haven't linked an account yet! Use \\`$link\\` to link with your NR Wallet account`)\n        }\n        return user.linked\n    }\n\n    private getKeywords(type?: keyof Keywords): string[] {\n        if (!type) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            return Array.prototype.concat(...Object.entries(DiscordService.keywords).map(([key, value]) => value))\n        }\n        return DiscordService.keywords[type] || []\n    }\n\n    // Reply with an unauthorised message\n    private unauthorised(message: Message): Promise {\n        return message.reply(new Attachment(`I'm sorry ${message.author.toString()}, I can't do that`, 'https://media1.tenor.com/images/86937766f3f44884362c716e8f1d0e19/tenor.gif'))\n    }\n\n    // Format currency input\n    private static formatCurrency(value: number, currency: string): number {\n        if (['EUR'].includes(currency)) {\n            return accounting.unformat(value.toString(), ',')\n        } else {\n            return accounting.unformat(value.toString())\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/core/profile.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                balance\n                            \n                            \n                                    Public\n                                currency\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                linked\n                            \n                            \n                                    Public\n                                sources\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: object)\n                    \n                \n                        \n                            \n                                Defined in src/shared/core/profile.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            balance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            linked\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sources\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/profile.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/core/profile.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Profile {\n    public token: string\n    public balance: {\n        available: number;\n        pending: number;\n    }\n    public currency: string\n    public sources: any\n    public id: string\n    public linked = false\n\n    constructor (data?: object) {\n        Object.assign(this, data)\n        this.linked = !!this.token\n    }\n\n    toJSON(): string {\n        return JSON.stringify(this)\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/profile/profile.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_redis: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/profile/profile.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _redis\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/services/profile/profile.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(profile: Profile)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/services/profile/profile.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n                                    \n                                                Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Redis\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/services/profile/profile.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { Profile } from '../../core/profile';\nimport { Redis } from 'ioredis';\n\n@Injectable()\nexport class ProfileService {\n    private client: Redis;\n\n    constructor(private _redis: RedisService) {\n        this.client = _redis.getClient();\n    }\n\n    // Save user\n    public save(profile: Profile): Promise {\n        return this.client.set(`user:${profile.id}`, profile.toJSON())\n    }\n\n    // Get user\n    public async get(id: string): Promise {\n        return new Profile(\n            Object.assign(\n                JSON.parse(await this.client.get(`user:${id}`)) || {}, { id }\n            )\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transaction.html":{"url":"classes/Transaction.html","title":"class - Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/core/transaction.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                amount\n                            \n                            \n                                    Public\n                                currency\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                sender\n                            \n                            \n                                    Public\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                execute\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: Message, data?: object)\n                    \n                \n                        \n                            \n                                Defined in src/shared/core/transaction.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    Message\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            action\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | number | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Message\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/core/transaction.ts:10\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            execute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    execute()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/core/transaction.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toJSON\n                        \n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/core/transaction.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/core/transaction.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from 'discord.js'\nimport Decimal from 'decimal.js'\n// TODO: Use Redis Cache\n\nexport class Transaction {\n    public message: Message\n    public sender: string\n    public amount: string | number | boolean\n    public currency: string | boolean\n    public users: string[]\n    public action: string | null | boolean\n\n    constructor(message?: Message, data? : object) {\n        this.message = message\n        this.sender = message.author.id\n        Object.assign(this, data)\n    }\n\n    // Execute with server\n    public execute(): void {\n        // Set number as a decimal\n        const dec = new Decimal(this.amount as number)\n\n        // Convert number to lowest common denominator (* 10^decimalPlaces)\n        const total = dec.decimalPlaces() > 0 ? dec.times(new Decimal(10).pow(dec.decimalPlaces())) : dec\n\n        // TODO: Send { total, this.currency }, to server with sender token and user id\n    }\n\n    // Return transaction to string\n    toString(): string {\n        return `Awesome! I'll ${this.action === 'split' ? 'split' : 'send'}:\\n\\n` +\n        `${this.amount} ${this.currency} ${this.action === 'split' ? 'between' : 'to'} ${this.users.length === 1 ? `\\n` : this.users.reduce((t: string, u: string) => t += `\\n`, '\\n\\n')}` +\n        `\\nSend a \\`$confirm\\` to confirm this transaction`\n    }\n\n    toJSON(): string {\n        return JSON.stringify(this)\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionService.html":{"url":"injectables/TransactionService.html","title":"injectable - TransactionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/transaction/transaction.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_redis: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/transaction/transaction.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _redis\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(message: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/services/transaction/transaction.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                            Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(transaction: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/services/transaction/transaction.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                                Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            client\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Redis\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/services/transaction/transaction.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { Message } from 'discord.js';\nimport { Transaction } from '../../core/transaction';\nimport { Redis } from 'ioredis';\n\n@Injectable()\nexport class TransactionService {\n    private client: Redis;\n\n    constructor(private _redis: RedisService) {\n        this.client = _redis.getClient();\n    }\n\n    // Save pending transaction\n    public save(transaction: Transaction): Promise {\n        const message = transaction.message\n        delete transaction.message\n        return this.client.set(`transaction:${message.guild.id}:${message.author.id}`, transaction.toJSON())\n    }\n\n    // Pull pending transaction from database\n    public async get(message: Message): Promise {\n        const tx = new Transaction(\n            message,\n            JSON.parse(\n                await this.client.get(`transaction:${message.guild.id}:${message.author.id}`)\n            )\n        )\n        return tx\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/discord/core/args.ts\n            \n            class\n            Args\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/discord/services/discord/discord.service.ts\n            \n            injectable\n            DiscordService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/discord/services/discord/discord.service.ts\n            \n            interface\n            Keywords\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/core/profile.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/shared/core/transaction.ts\n            \n            class\n            Transaction\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/shared/services/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/services/transaction/transaction.service.ts\n            \n            injectable\n            TransactionService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.11.5\n        \n            @nestjs/core : ^6.11.5\n        \n            @nestjs/platform-express : ^6.10.14\n        \n            accounting : ^0.4.1\n        \n            crypto-js : ^3.1.9-1\n        \n            decimal.js : ^10.2.0\n        \n            discord.js : ^11.5.1\n        \n            nestjs-redis : ^1.2.5\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Colours   (src/.../colours.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/discord/core/colours.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Colours\n                    \n                \n                        \n                            \n                                 info\n                            \n                        \n                        \n                            \n                                Value : 2711204\n                            \n                        \n                        \n                            \n                                 success\n                            \n                        \n                        \n                            \n                                Value : 6005828\n                            \n                        \n                        \n                            \n                                 warning\n                            \n                        \n                        \n                            \n                                Value : 16751112\n                            \n                        \n                        \n                            \n                                 danger\n                            \n                        \n                        \n                            \n                                Value : 16264493\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DiscordModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_DiscordModule\n\n\n\ncluster_DiscordModule_providers\n\n\n\n\nDiscordModule\n\nDiscordModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDiscordModule->AppModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nDiscordModule -->\n\nProfileService->DiscordModule\n\n\n\nAppModule -->\n\nProfileService->AppModule\n\n\n\n\n\nTransactionService\n\nTransactionService\n\nDiscordModule -->\n\nTransactionService->DiscordModule\n\n\n\nAppModule -->\n\nTransactionService->AppModule\n\n\n\n\n\nDiscordService\n\nDiscordService\n\nDiscordModule -->\n\nDiscordService->DiscordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
